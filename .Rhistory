setwd("C:/Users/bff_n/Documents/GitHub/Dashboard-Mortalidad/")
all_data <- read.csv(file = 'all_data.csv')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(maps)
install.packages("maps")
library(maps)
setwd("C:/Users/bff_n/Documents/GitHub/Dashboard-Mortalidad/")
all_data <- read.csv(file = 'all_data.csv')
UK <- map_data("world") %>% filter(region=="GT")
GT <- map_data("world") %>% filter(region=="GT")
GT
View(GT)
data <- world.cities %>% filter(country.etc=="GT")
View(data)
sexo <- starwars %>% count(all_data$SEXO)
sexo <- all_data %>% count($SEXO)
sexo <- all_data %>% count(SEXO)
View(sexo)
grupos_etarios <- cut(all_data$EDAD,breaks = 10)
grupos_etarios <- cut(all_data$EDAD,10)
table(grupos_etarios)
grupos_etarios <- cut(all_data$EDAD,break=10)
table(grupos_etarios)
grupos_etarios <- cut(all_data$EDAD,breaks=10)
table(grupos_etarios)
data_edad <-na.omit(all_data)
View(data_edad)
grupos_etarios <- cut(data_edad$EDAD,breaks=10)
table(grupos_etarios)
data_edad <-na.omit(all_data)
grupos_etarios <- cut(data_edad$EDAD,breaks=10)
sexo <- all_data %>% count(SEXO)
registros <- abs(rnorm(12 , 0 , 15))
data <- data_edad
# Stacked
ggplot(data, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack", stat="identity")
sexo <- data_edad %>% count(SEXO)
registros <- abs(rnorm(12 , 0 , 15))
data <- data_edad
# Stacked
ggplot(data, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack", stat="identity")
registros <- data_edad
data <- data_edad
# Stacked
ggplot(data, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack", stat="identity")
rlang::last_error()
View(sexo)
# Stacked
ggplot(data_edad, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack", stat="identity")
# Stacked
ggplot(data_edad, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack")
# Stacked
ggplot(data_edad, aes(fill=sexo, y=registros, x=grupos_etarios)) +
geom_bar(position="stack")
clear
clear()
table(grupos_etarios)
c(grupos_etarios)
grupos_etarios %>% group_by(gr=cut(all_data, breaks= seq(0, 123, by = 10)) )
install.packages("plotly")
#Importacion de las librerias necesarias
library("readxl")
#referenciando el directorio de trabajo
setwd("C:/Users/bff_n/Documents/GitHub/Dashboard-Mortalidad/")
#Lectura de datos
data_1519 <- read_excel( "b1519_renap.xlsx")
data_1921 <- read_excel("baseCES2021_renap.xlsx")
#Obteniendo los valores unicos presentados en la columna de departamento
unique(data_1519$DEPARTAMENTO)
#Filtrando los registros que tienen departamentos de Guatemala
departamentos_validos <- c("BAJA VERAPAZ", "HUEHUETENANGO","GUATEMALA", "ALTA VERAPAZ",
"CHIQUIMULA", "QUICHE", "QUETZALTENANGO", "ESCUINTLA", "ZACAPA",
"IZABAL", "SAN MARCOS", "TOTONICAPAN", "JUTIAPA", "SACATEPEQUEZ",
"PETEN", "RETALHULEU", "SUCHITEPEQUEZ", "SANTA ROSA", "SOLOLÁ",
"CHIMALTENANGO", "EL PROGRESO", "JALAPA")
data_1519 <- subset(data_1519, DEPARTAMENTO %in% departamentos_validos)
unique(data_1519$DEPARTAMENTO)
#Verificando los valores unicos de las demas columnas
unique(data_1519$SEXO)
unique(data_1519$CAUSA1)
data_1519 <- data_1519[,-3]
#Eliminando columnas y modificando nombres para hacer coincidir bases de datos
data_1921
data_1921 <- data_1921[,c(-12,-5,-3)]
names(data_1921)
names (data_1921)[4] = "SEXO"
names (data_1921)[3] = "DEPARTAMENTO"
names (data_1921)[1] = "ID"
names (data_1921)[6] = "CAUSA1"
names (data_1921)[7] = "CAUSA2"
names (data_1921)[8] = "CAUSA3"
names (data_1921)[9] = "CAUSA4"
unique(data_1921$DEPARTAMENTO)
data_1921 <- subset(data_1921, DEPARTAMENTO %in% departamentos_validos)
unique(data_1921$DEPARTAMENTO)
#merge de las bases de datos
all_data <- merge(data_1519, data_1921, all = TRUE)
all_data$ID <- seq.int(nrow(all_data))
all_data <- all_data[,c("ID", names(all_data)[names(all_data) != "ID"])]
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%d-%m-%Y")
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
all_data <- all_data[,c("ID", names(all_data)[names(all_data) != "ID"])]
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
#merge de las bases de datos
all_data <- merge(data_1519, data_1921, all = TRUE)
all_data$ID <- seq.int(nrow(all_data))
all_data <- all_data[,c("ID", names(all_data)[names(all_data) != "ID"])]
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
View(all_data)
#all_data[is.na(all_data)] = "DESCONOCIDA"
unique(all_data$EDAD)
unique(all_data$CAUSA1)
unique(all_data$FECHA)
all_data[all_data$FECHA < 01-01-2015, ]
all_data
View(all_data)
all_data[all_data$FECHA > "01-01-2015", ]
all_data
View(all_data)
all_data[all_data[["FECHA"]] >= "2015-01-01", ]
all_data
View(all_data)
View(all_data)
View(all_data[[2]][[1]])
all_data[all_data[["FECHA"]] >= 2015-01-01, ]
all_data
View(all_data)
all_data %>% filter(FECHA >= "2015-01-01")
all_data
View(all_data)
typeof(all_data$FECHA)
typeof(all_data$FECHA[0])
typeof(all_data$FECHA[1])
all_data <- all_data %>% filter(FECHA >= "2015-01-01")
all_data
data_1921 <- data_1921 %>% filter(FECHA >= "2015-01-01")
#merge de las bases de datos
all_data <- merge(data_1519, data_1921, all = TRUE)
all_data$ID <- seq.int(nrow(all_data))
all_data <- all_data[,c("ID", names(all_data)[names(all_data) != "ID"])]
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
all_data
View(all_data)
View(all_data)
View(data_1921)
source("~/GitHub/Dashboard-Mortalidad/clean_files.r", echo=TRUE)
write.csv(all_data,"all_data.csv", row.names = FALSE)
#Lectura de datos
data_1519 <- read_excel( "b1519_renap.xlsx")
data_1921 <- read_excel("baseCES2021_renap.xlsx")
#Obteniendo los valores unicos presentados en la columna de departamento
unique(data_1519$DEPARTAMENTO)
#Filtrando los registros que tienen departamentos de Guatemala
departamentos_validos <- c("BAJA VERAPAZ", "HUEHUETENANGO","GUATEMALA", "ALTA VERAPAZ",
"CHIQUIMULA", "QUICHE", "QUETZALTENANGO", "ESCUINTLA", "ZACAPA",
"IZABAL", "SAN MARCOS", "TOTONICAPAN", "JUTIAPA", "SACATEPEQUEZ",
"PETEN", "RETALHULEU", "SUCHITEPEQUEZ", "SANTA ROSA", "SOLOLÁ",
"CHIMALTENANGO", "EL PROGRESO", "JALAPA")
data_1519 <- subset(data_1519, DEPARTAMENTO %in% departamentos_validos)
unique(data_1519$DEPARTAMENTO)
#Verificando los valores unicos de las demas columnas
unique(data_1519$SEXO)
unique(data_1519$CAUSA1)
data_1519 <- data_1519[,-3]
#Eliminando columnas y modificando nombres para hacer coincidir bases de datos
data_1921
data_1921 <- data_1921[,c(-12,-5,-3)]
names(data_1921)
names (data_1921)[4] = "SEXO"
names (data_1921)[3] = "DEPARTAMENTO"
names (data_1921)[1] = "ID"
names (data_1921)[6] = "CAUSA1"
names (data_1921)[7] = "CAUSA2"
names (data_1921)[8] = "CAUSA3"
names (data_1921)[9] = "CAUSA4"
unique(data_1921$DEPARTAMENTO)
data_1921 <- subset(data_1921, DEPARTAMENTO %in% departamentos_validos)
unique(data_1921$DEPARTAMENTO)
data_1921 <- data_1921 %>% filter(FECHA >= "2015-01-01")
#merge de las bases de datos
all_data <- merge(data_1519, data_1921, all = TRUE)
all_data$ID <- seq.int(nrow(all_data))
all_data <- all_data[,c("ID", names(all_data)[names(all_data) != "ID"])]
all_data[['FECHA']] <- strptime(all_data[['FECHA']], format = "%Y-%m-%d")
#all_data[is.na(all_data)] = "DESCONOCIDA"
unique(all_data$EDAD)
unique(all_data$CAUSA1)
unique(all_data$FECHA)
all_data
write.csv(all_data,"all_data.csv", row.names = FALSE)
View(sexo)
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(autotypenumbers = 'strict', title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
library(plotly)
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
setwd("C:/Users/bff_n/Documents/GitHub/Dashboard-Mortalidad/")
all_data <- read.csv(file = 'all_data.csv')
sexo <- all_data %>% count(SEXO)
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor= c('#F4BBBB', '#F1E1A6', '#97DBAE'),
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
fig <- plot_ly(x = sexo$SEXO, y = sexo$n, type = 'bar') %>%
layout(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor= c('#F4BBBB', '#F1E1A6', '#97DBAE'),
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
muertes_fecha <- all_data %>% count(FECHA)
View(muertes_fecha)
p <- all_data %>%
ggplot( aes(x=muertes_fecha$FECHA, y=muertes_fecha$n)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
install.packages("hrbrthemes")
library(hrbrthemes)
p <- all_data %>%
ggplot( aes(x=muertes_fecha$FECHA, y=muertes_fecha$n)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
muertes_fecha$FECHA
muertes_fecha$n
muertes_fecha$FECHA
count(muertes_fecha$FECHA)
head(muertes_fecha$FECHA)
tail(muertes_fecha$FECHA)
muertes_fecha$FECHA
muertes_fecha$n
muertes_fecha$n
muertes_fecha$FECHA
muertes_fecha$n
muertes_fecha$FECHA
p <- all_data %>%
ggplot( aes(x=muertes_fecha$FECHA, y=muertes_fecha$n)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
p <- muertes_fecha %>%
ggplot( aes(x=muertes_fecha$FECHA, y=muertes_fecha$n)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
